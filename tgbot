import telebot
from datetime import date, timedelta
import requests
import json
from telebot import types

WEATHER_API = 'http://api.openweathermap.org/data/2.5/forecast'
token = 'api_telegram_bot'
bot = telebot.TeleBot(token)

MAIN_STATE = 'main'
WEATHER_DATE_STATE = 'weather_date_handler'
CITY_STATE = 'city_state'

# citys = {}
MONTH = {
    1: '—è–Ω–≤–∞—Ä—è',
    2: '—Ñ–µ–≤—Ä–∞–ª—è',
    3: '–º–∞—Ä—Ç–∞',
    4: '–∞–ø—Ä–µ–ª—è',
    5: '–º–∞—è',
    6: '–∏—é–Ω—è',
    7: '–∏—é–ª—è',
    8: '–∞–≤–≥—É—Å—Ç–∞',
    9: '—Å–µ–Ω—Ç—è–±—Ä—è',
    10: '–æ–∫—Ç—è–±—Ä—è',
    11: '–Ω–æ—è–±—Ä—è',
    12: '–¥–µ–∫–∞–±—Ä—è',
}
"""data = {
    'states': {

    },
    MAIN_STATE: {

    },
    CITY_STATE: {

    },
    WEATHER_DATE_STATE: {

    },
}"""

# calls = {}

RECALL = '\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:\n/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚òÅÔ∏è\n/calls - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ü§ñ'
try:
    data = json.load(open('db/data.json', 'r', encoding='utf-8'))
except FileNotFoundError:
    data = {
        'states': {

        },
        MAIN_STATE: {

        },
        CITY_STATE: {

        },
        WEATHER_DATE_STATE: {

        }
    }
try:
    citys = json.load(open('db/citys.json', 'r', encoding='utf-8'))
except FileNotFoundError:
    citys = {
        'city': {
        }
    }
try:
    calls = json.load(open('db/calls.json', 'r', encoding='utf-8'))
except FileNotFoundError:
    calls = {
        "call": {
        }
    }


def change_data(key, user_id, value):
    data[key][user_id] = value
    json.dump(data,
              open('db/data.json', 'w', encoding='utf-8'),
              indent=2,
              ensure_ascii=False)


def change_citys(key, user_id, value):
    citys[key][user_id] = value
    json.dump(citys,
              open('db/citys.json', 'w', encoding='utf-8'),
              indent=2,
              ensure_ascii=False)


def change_calls(key, user_id, value):
    calls[key][user_id] = value
    json.dump(calls,
              open('db/calls.json', 'w', encoding='utf-8'),
              indent=2,
              ensure_ascii=False)


@bot.message_handler(func=lambda message: True)
def dispathcer(message):
    user_id = str(message.from_user.id)
    state = data['states'].get(user_id, MAIN_STATE)
    if state == MAIN_STATE:
        main_handler(message)
    elif state == CITY_STATE:
        city_handler(message)
    elif state == WEATHER_DATE_STATE:
        weather_date(message)


def main_handler(message):
    user_id = str(message.from_user.id)
    bot.send_chat_action(message.from_user.id, 'typing')
    if message.text == '/start':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥!'), types.KeyboardButton('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤'))
        bot.send_message(
            user_id,
            '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≥–¥–µ —É–≥–æ–¥–Ω–æ!',
            reply_markup=markup
        )
        change_data('states', user_id, MAIN_STATE)
    elif message.text == '–ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥!' or message.text == '/weather':
        bot.send_message(message.from_user.id,
                         '–í–í–û–î –ì–û–†–û–î–ê: \n'
                         '–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ) ‚úçÔ∏è\n'
                         '–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üòâ')
        change_data('states', user_id, CITY_STATE)
    elif message.text == '/calls' or message.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤':
        if user_id not in calls['call']:
            change_calls('call', user_id, str(0))
        bot.send_message(user_id, calls['call'][user_id])
        bot.send_message(user_id, RECALL)
    else:
        bot.send_message(user_id,
                         f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò±\n {RECALL}')


def city_handler(message):   # –Ø –¢–£–¢ –ü–†–û–í–ï–†–Ø–Æ, –ï–°–¢–¨ –õ–ò –í–í–ï–î–ï–ù–´–ô –ì–û–†–û–î –ò–õ–ò –í–í–ï–î–ï–ù –õ–ò –û–ù –ë–ï–ó –û–®–ò–ë–û–ö. –ï–°–õ–ò –í–°–ï –û–ö –í TRY –Ø –ü–ï–†–ï–ö–ò–î–´–í–ê–Æ –£–ñ–ï –í –ü–û–ì–û–î–£, –ü–†–ï–î–¢–í–ê–†–ò–¢–ï–õ–¨–ù–û
                                                                                                    –ó–ê–ü–ò–°–ê–í –ì–û–†–û–î –í –°–õ–û–í–ê–†–¨
    bot.send_chat_action(message.from_user.id, 'typing')
    user_id = str(message.from_user.id)
    today = date.today()
    day3 = date.today() + timedelta(days=3)
    while True:
        try:
            city = message.text.lower()
            params_weather_api_true = {
                'q': city,
                'appid': 'api —Å openweather',
                'units': 'metric',
                'lang': 'ru'
            }
            weather_request = requests.get(WEATHER_API, params=params_weather_api_true)
            weather_json = weather_request.json()
            data_list = weather_json['list']
            change_citys('city', user_id, message.text.upper())
            bot.send_message(message.from_user.id,
                             '–ü–†–û–ì–ù–û–ó –ü–û–ì–û–î–´: \n'
                             f'–°–µ–≥–æ–¥–Ω—è: {today.day} {MONTH[today.month]} üóìÔ∏è\n–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å? üóÇÔ∏è\n'
                             '–í–≤–µ–¥–∏ "–°–µ–≥–æ–¥–Ω—è" –∏–ª–∏ "–ó–∞–≤—Ç—Ä–∞".\n'
                             f'–¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–æ {day3.day} {MONTH[day3.month]}, '
                             f'–ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—è –¥–æ—Å—Ç—É–ø–Ω–æ–µ —á–∏—Å–ª–æ üëç\n')
            change_data('states', user_id, WEATHER_DATE_STATE)
            break
        except KeyError:
            bot.send_message(message.from_user.id,
                             '–í–í–û–î –ì–û–†–û–î–ê: \n'
                             '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –≥–æ—Ä–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            change_data('states', user_id, CITY_STATE)
            break


def weather_date(message):
    user_id = str(message.from_user.id)
    city = citys['city'][user_id]
    today = date.today()
    day1 = date.today() + timedelta(days=1)
    day2 = date.today() + timedelta(days=2)
    day3 = date.today() + timedelta(days=3)

    params_weather_api = {
        'q': city,
        'appid': '67867801a6efa50790ed8ec4a0e24edd',
        'units': 'metric',
        'lang': 'ru'
    }

    weather_request = requests.get(WEATHER_API, params=params_weather_api)
    weather_json = weather_request.json()
    data_list = weather_json['list']
    template = '–ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {} {}C, —Ç–∞–∫ –∂–µ {} ü§´'
    bot.send_chat_action(message.from_user.id, 'typing')
    if user_id not in calls['call']:
        change_calls('call', user_id, str(0))
    change_calls('call', user_id, int(calls['call'][user_id]) + 1)
    
    if '—Å–µ–≥–æ–¥–Ω—è' in message.text.lower() or str(today.day).find(str(message.text.lower())) == 0:
        weather = data_list[0]
        weather_dic = weather['weather']
        temperature = data_list[0]['main']['temp']
        bot.send_message(message.from_user.id,
                         template.format(city, temperature, weather_dic[0]['description']))
        change_data('states', user_id, MAIN_STATE)
        bot.send_message(message.from_user.id, RECALL)
        
    elif '–∑–∞–≤—Ç—Ä–∞' in message.text.lower() or str(day1.day).find(str(message.text.lower())) == 0:
        weather = data_list[1]
        weather_dic = weather['weather']
        temperature = data_list[1]['main']['temp']
        bot.send_message(message.from_user.id,
                         template.format(city, temperature, weather_dic[0]['description']))
        change_data('states', user_id, MAIN_STATE)
        bot.send_message(message.from_user.id, RECALL)
        
    elif str(day2.day).find(str(message.text.lower())) == 0:
        weather = data_list[2]
        weather_dic = weather['weather']
        temperature = data_list[2]['main']['temp']
        bot.send_message(message.from_user.id,
                         template.format(city, temperature, weather_dic[0]['description']))
        change_data('states', user_id, MAIN_STATE)
        bot.send_message(message.from_user.id, RECALL)
        
    elif str(day3.day).find(str(message.text.lower())) == 0:
        weather = data_list[2]
        weather_dic = weather['weather']
        temperature = data_list[2]['main']['temp']
        bot.send_message(message.from_user.id,
                         template.format(city, temperature, weather_dic[0]['description']))
        change_data('states', user_id, MAIN_STATE)
        bot.send_message(message.from_user.id, RECALL)
        
    else:
        bot.send_message(message.from_user.id, '–í—ã –≤—ã—à–ª–∏ –∑–∞ —Ä–∞–º–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç! \n'
                                               '–ò–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–º–∞–Ω–¥—É!')
        change_data('states', user_id, WEATHER_DATE_STATE)
        bot.send_message(message.from_user.id,
                         '–ü–†–û–ì–ù–û–ó –ü–û–ì–û–î–´: \n'
                         f'–°–µ–≥–æ–¥–Ω—è: {today.day} {MONTH[today.month]} üóìÔ∏è\n–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å? üóÇÔ∏è\n'
                         '–í–≤–µ–¥–∏ "–°–µ–≥–æ–¥–Ω—è" –∏–ª–∏ "–ó–∞–≤—Ç—Ä–∞".\n'
                         f'–¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–æ {day3.day} {MONTH[day3.month]}, '
                         f'–ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—è –¥–æ—Å—Ç—É–ø–Ω–æ–µ —á–∏—Å–ª–æ üëç\n')


bot.polling()
